
# ---- END OF D:\djangoProjects\drfsite\drfsite\__init__.py ----

"""
ASGI config for drfsite project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'drfsite.settings')

application = get_asgi_application()

# ---- END OF D:\djangoProjects\drfsite\drfsite\asgi.py ----

"""
Django settings for drfsite project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hjv5x^0%((+vs(5$6^yka2duiszu*#4enl4&hugy7$c98g_p5g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'librarian.apps.LibrarianConfig',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_yasg',
    'django_filters',


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # РђРґСЂРµСЃ С„СЂРѕРЅС‚РµРЅРґР°
]

ROOT_URLCONF = 'drfsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drfsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'librarian',
        'USER': 'postgres',
        'PASSWORD': 'p',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'library_db',
#         'USER': 'library_user',
#         'PASSWORD': 'library_password',
#         'HOST': 'db',
#         'PORT': 5432,
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Asia/Bishkek'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'librarian.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
    ],
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}


SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': 'Р¤РѕСЂРјР°С‚: **Bearer &lt;С‚РѕРєРµРЅ&gt;**'
        }
    },
    'USE_SESSION_AUTH': False,
}

# ---- END OF D:\djangoProjects\drfsite\drfsite\settings.py ----

"""
URL configuration for drfsite project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from rest_framework import routers
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView, TokenVerifyView

from .yasg import urlpatterns as doc_url
from librarian.views import *

router = routers.DefaultRouter()
router.register(r'users', UserViewSet)
router.register(r'authors', AuthorViewSet)
router.register(r'directions', DirectionViewSet)
router.register(r'publishers', PublisherViewSet)
router.register(r'books', BookViewSet)
router.register(r'inventories', InventoryViewSet)
router.register(r'issues', BookIssueViewSet)
router.register(r'returns', BookReturnViewSet)

urlpatterns = [
    path('api/admin/', admin.site.urls),
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('api/token/verify/', TokenVerifyView.as_view(), name='token_verify'),
    path('api/register/', RegisterView.as_view(), name='register'),
    path('api/', include(router.urls)),
    path("users/me/", CurrentUserView.as_view()),
    path('reports/issued-books/', IssuedBooksReportView.as_view(), name='issued-books-report'),
    path('reports/overdue-books/', OverdueBooksReportView.as_view(), name='overdue-books-report'),
    path('reports/book-availability/', BookAvailabilityReportView.as_view(), name='book-availability-report'),
    path('reports/reader-activity/', ReaderActivityReportView.as_view(), name='reader-activity-report'),
]

urlpatterns += doc_url

# ---- END OF D:\djangoProjects\drfsite\drfsite\urls.py ----

"""
WSGI config for drfsite project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'drfsite.settings')

application = get_wsgi_application()

# ---- END OF D:\djangoProjects\drfsite\drfsite\wsgi.py ----

from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework_simplejwt.authentication import JWTAuthentication

schema_view = get_schema_view(
   openapi.Info(
      title="Library API",
      default_version='v1',
      description="Р”РѕРєСѓРјРµРЅС‚Р°С†РёСЏ РґР»СЏ API Р±РёР±Р»РёРѕС‚РµРєРё",
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
   authentication_classes=(JWTAuthentication,),
)



from django.urls import path, re_path

urlpatterns = [
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    re_path(r'^swagger(?P<format>\.json|\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),
]

# ---- END OF D:\djangoProjects\drfsite\drfsite\yasg.py ----


# ---- END OF D:\djangoProjects\drfsite\librarian\__init__.py ----

from django.contrib import admin
from django.contrib.admindocs.views import BookmarkletsView

from .models import  User,Author, Publisher, Direction,  Book, Inventory, BookIssue, BookReturn

# Register your models here.
admin.site.register(User)
admin.site.register(Book)
admin.site.register(Author)
admin.site.register(Publisher)
admin.site.register(Direction)
admin.site.register(Inventory)
admin.site.register(BookIssue)
admin.site.register(BookReturn)

# ---- END OF D:\djangoProjects\drfsite\librarian\admin.py ----

from django.apps import AppConfig


class LibrarianConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'librarian'

# ---- END OF D:\djangoProjects\drfsite\librarian\apps.py ----


# ---- END OF D:\djangoProjects\drfsite\librarian\migrations\__init__.py ----

# Generated by Django 5.1.5 on 2025-04-12 18:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Direction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=50)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('passport', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('role', models.CharField(choices=[('reader', 'Reader'), ('librarian', 'Librarian')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BookIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_date', models.DateField(auto_now_add=True)),
                ('due_date', models.DateField()),
                ('issued_by', models.ForeignKey(limit_choices_to={'role': 'librarian'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issued_books', to=settings.AUTH_USER_MODEL)),
                ('reader', models.ForeignKey(limit_choices_to={'role': 'reader'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BookReturn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('return_date', models.DateField(auto_now_add=True)),
                ('condition', models.TextField(blank=True)),
                ('issue', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='librarian.bookissue')),
                ('received_by', models.ForeignKey(limit_choices_to={'role': 'librarian'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='returned_books', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('udc', models.CharField(blank=True, max_length=50, verbose_name='РЈР”Рљ')),
                ('bbk', models.CharField(blank=True, max_length=50, verbose_name='Р‘Р‘Рљ')),
                ('isbn', models.CharField(blank=True, max_length=20, verbose_name='ISBN')),
                ('quantity', models.PositiveIntegerField()),
                ('authors', models.ManyToManyField(to='librarian.author')),
                ('direction', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='librarian.direction')),
                ('publisher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='librarian.publisher')),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inventory_number', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('available', 'Available'), ('borrowed', 'Borrowed')], default='available', max_length=20)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='librarian.book')),
            ],
        ),
        migrations.AddField(
            model_name='bookissue',
            name='inventory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='librarian.inventory'),
        ),
    ]

# ---- END OF D:\djangoProjects\drfsite\librarian\migrations\0001_initial.py ----

# Generated by Django 5.1.5 on 2025-04-21 07:01

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('librarian', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='book',
            name='is_active',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('reader', 'Р§РёС‚Р°С‚РµР»СЊ'), ('librarian', 'Р‘РёР±Р»РёРѕС‚РµРєР°СЂСЊ')], max_length=20),
        ),
    ]

# ---- END OF D:\djangoProjects\drfsite\librarian\migrations\0002_book_is_active_alter_user_role.py ----

# Generated by Django 5.1.5 on 2025-04-21 11:35

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('librarian', '0002_book_is_active_alter_user_role'),
    ]

    operations = [
        migrations.AlterField(
            model_name='inventory',
            name='status',
            field=models.CharField(choices=[('available', 'Available'), ('borrowed', 'Borrowed'), ('deleted', 'Deleted')], default='available', max_length=20),
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('reader', 'Р§РёС‚Р°С‚РµР»СЊ'), ('librarian', 'Р‘РёР±Р»РёРѕС‚РµРєР°СЂСЊ')], default='reader', max_length=20),
        ),
    ]

# ---- END OF D:\djangoProjects\drfsite\librarian\migrations\0003_alter_inventory_status_alter_user_role.py ----

# Generated by Django 5.1.5 on 2025-04-21 16:58

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('librarian', '0003_alter_inventory_status_alter_user_role'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='book',
            name='is_active',
        ),
        migrations.AddField(
            model_name='author',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='book',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='bookissue',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='bookreturn',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='direction',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='publisher',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
    ]

# ---- END OF D:\djangoProjects\drfsite\librarian\migrations\0004_remove_book_is_active_author_is_deleted_and_more.py ----

# Generated by Django 5.1.5 on 2025-04-27 08:57

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('librarian', '0004_remove_book_is_active_author_is_deleted_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='bookreturn',
            name='fine',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=6),
        ),
    ]

# ---- END OF D:\djangoProjects\drfsite\librarian\migrations\0005_bookreturn_fine.py ----

# Generated by Django 5.1.5 on 2025-04-28 12:21

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('librarian', '0005_bookreturn_fine'),
    ]

    operations = [
        migrations.AlterField(
            model_name='user',
            name='passport',
            field=models.CharField(max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone',
            field=models.CharField(max_length=20, unique=True),
        ),
    ]

# ---- END OF D:\djangoProjects\drfsite\librarian\migrations\0006_alter_user_passport_alter_user_phone.py ----

# Generated by Django 5.1.5 on 2025-06-20 19:02

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('librarian', '0006_alter_user_passport_alter_user_phone'),
    ]

    operations = [
        migrations.AddField(
            model_name='book',
            name='category',
            field=models.CharField(choices=[('textbook', 'РЈС‡РµР±РЅРёРє'), ('manual', 'РњРµС‚РѕРґРёС‡РєР°'), ('fiction', 'РҐСѓРґРѕР¶РµСЃС‚РІРµРЅРЅР°СЏ'), ('science', 'РќР°СѓС‡РЅР°СЏ'), ('', ' РџСѓР±Р»РёС†РёСЃС‚РёРєР°'), ('other', 'Р”СЂСѓРіРѕРµ')], default='other', max_length=20),
        ),
        migrations.AddField(
            model_name='book',
            name='description',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='address',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='passport',
            field=models.CharField(blank=True, max_length=50, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone',
            field=models.CharField(blank=True, max_length=20, null=True, unique=True),
        ),
    ]

# ---- END OF D:\djangoProjects\drfsite\librarian\migrations\0007_book_category_book_description_alter_user_address_and_more.py ----

# Generated by Django 5.1.5 on 2025-06-23 11:02

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('librarian', '0007_book_category_book_description_alter_user_address_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='book',
            name='category',
            field=models.CharField(choices=[('textbook', 'РЈС‡РµР±РЅРёРє'), ('manual', 'РњРµС‚РѕРґРёС‡РєР°'), ('tutorial', 'РџРѕСЃРѕР±РёРµ'), ('fiction', 'РҐСѓРґРѕР¶РµСЃС‚РІРµРЅРЅР°СЏ'), ('science', 'РќР°СѓС‡РЅР°СЏ'), ('publicism', ' РџСѓР±Р»РёС†РёСЃС‚РёРєР°'), ('other', 'Р”СЂСѓРіРѕРµ')], default='other', max_length=20),
        ),
    ]

# ---- END OF D:\djangoProjects\drfsite\librarian\migrations\0008_alter_book_category.py ----


# Create your models here.

from django.db import models
from django.core.exceptions import ValidationError
from django.contrib.auth.models import AbstractUser
from django.utils import timezone
import re

# РђР±СЃС‚СЂР°РєС‚РЅР°СЏ РјРѕРґРµР»СЊ РјСЏРіРєРѕРіРѕ СѓРґР°Р»РµРЅРёСЏ
class SoftDeleteManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(is_deleted=False)

class SoftDeleteModel(models.Model):
    is_deleted = models.BooleanField(default=False)

    objects = SoftDeleteManager()
    all_objects = models.Manager()  # РµСЃР»Рё РЅР°РґРѕ РІРёРґРµС‚СЊ РІСЃС‘ (РЅР°РїСЂРёРјРµСЂ, РІ Р°РґРјРёРЅРєРµ)

    class Meta:
        abstract = True

    def delete(self, *args, **kwargs):
        self.is_deleted = True
        self.save()


class User(AbstractUser):
    ROLE_CHOICES = [
        ('reader', 'Р§РёС‚Р°С‚РµР»СЊ'),
        ('librarian', 'Р‘РёР±Р»РёРѕС‚РµРєР°СЂСЊ'),
    ]

    middle_name = models.CharField(max_length=50, blank=True)
    birth_date = models.DateField(null=True, blank=True)
    passport = models.CharField(max_length=50, unique=True, null=True, blank=True)
    phone = models.CharField(max_length=20, unique=True, null=True, blank=True)
    address = models.TextField(null=True, blank=True)
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='reader')

    def __str__(self):
        return f"{self.last_name} {self.first_name[0]}.{self.middle_name[0] if self.middle_name else ''}"

    def delete(self, *args, **kwargs):
        self.is_active = False
        self.save()


# --- РђРІС‚РѕСЂ ---
class Author(SoftDeleteModel):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    middle_name = models.CharField(max_length=50, blank=True)

    def __str__(self):
        return f"{self.last_name} {self.first_name[0]}.{self.middle_name[0] if self.middle_name else ''}"

# --- РќР°РїСЂР°РІР»РµРЅРёРµ (РєР°С‚РµРіРѕСЂРёСЏ РєРЅРёРіРё) ---
class Direction(SoftDeleteModel):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

# --- РР·РґР°С‚РµР»СЊСЃС‚РІРѕ ---
class Publisher(SoftDeleteModel):
    name = models.CharField(max_length=150)

    def __str__(self):
        return self.name

# --- РљРЅРёРіР° ---
class Book(SoftDeleteModel):
    CATEGORY_CHOICES = [
        ('textbook', 'РЈС‡РµР±РЅРёРє'),
        ('manual', 'РњРµС‚РѕРґРёС‡РєР°'),
        ('tutorial', 'РџРѕСЃРѕР±РёРµ'),
        ('fiction', 'РҐСѓРґРѕР¶РµСЃС‚РІРµРЅРЅР°СЏ'),
        ('science', 'РќР°СѓС‡РЅР°СЏ'),
        ('publicism', ' РџСѓР±Р»РёС†РёСЃС‚РёРєР°'),
        ('other', 'Р”СЂСѓРіРѕРµ'),
    ]
    title = models.CharField(max_length=255)
    authors = models.ManyToManyField(Author)
    direction = models.ForeignKey(Direction, on_delete=models.SET_NULL, null=True)
    publisher = models.ForeignKey(Publisher, on_delete=models.SET_NULL, null=True)
    udc = models.CharField("РЈР”Рљ", max_length=50, blank=True)  # РЈР”Рљ вЂ” СЃС‚СЂРѕРєР°, С‡С‚РѕР±С‹ РїРѕРґРґРµСЂР¶РёРІР°С‚СЊ С„РѕСЂРјР°С‚ РІСЂРѕРґРµ "004.4"
    bbk = models.CharField("Р‘Р‘Рљ", max_length=50, blank=True)  # Р‘Р‘Рљ вЂ” Р°РЅР°Р»РѕРіРёС‡РЅРѕ
    isbn = models.CharField("ISBN", max_length=20, blank=True)
    quantity = models.PositiveIntegerField()
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, default='other')
    description = models.TextField(blank=True)

    def save(self, *args, **kwargs):
        creating = not self.pk
        old_quantity = None
        if not creating:
            old_quantity = Book.objects.get(pk=self.pk).quantity

        super().save(*args, **kwargs)

        # Р•СЃР»Рё СЃРѕР·РґР°РµС‚СЃСЏ РЅРѕРІР°СЏ РєРЅРёРіР°, СЃРѕР·РґР°РµРј СЌРєР·РµРјРїР»СЏСЂС‹
        if creating:
            for _ in range(self.quantity):
                # РЎРѕС…СЂР°РЅСЏРµРј РєР°Р¶РґС‹Р№ СЌРєР·РµРјРїР»СЏСЂ РѕС‚РґРµР»СЊРЅРѕ, С‡С‚РѕР±С‹ СЃСЂР°Р±РѕС‚Р°Р» save()
                inventory_item = Inventory(book=self, status='available')
                inventory_item.save()

        elif old_quantity is not None:
            diff = self.quantity - old_quantity
            # Р•СЃР»Рё РєРѕР»РёС‡РµСЃС‚РІРѕ СѓРІРµР»РёС‡РёР»РѕСЃСЊ
            if diff > 0:
                for _ in range(diff):
                    inventory_item = Inventory(book=self, status='available')
                    inventory_item.save()

            # Р•СЃР»Рё РєРѕР»РёС‡РµСЃС‚РІРѕ СѓРјРµРЅСЊС€РёР»РѕСЃСЊ
            elif diff < 0:
                available = Inventory.objects.filter(
                    book=self,
                    status='available'
                )[:abs(diff)]
                if available.count() < abs(diff):
                    raise ValidationError(
                        "РќРµР»СЊР·СЏ СѓРјРµРЅСЊС€РёС‚СЊ РєРѕР»РёС‡РµСЃС‚РІРѕ: РЅРµРґРѕСЃС‚Р°С‚РѕС‡РЅРѕ СЃРІРѕР±РѕРґРЅС‹С… СЌРєР·РµРјРїР»СЏСЂРѕРІ."
                    )
                for inv in available:
                    inv.update(status='deleted')

    def delete(self, *args, **kwargs):
        if BookIssue.objects.filter(book=self).exists():
            raise ValidationError("РќРµР»СЊР·СЏ СѓРґР°Р»РёС‚СЊ РєРЅРёРіСѓ, РєРѕС‚РѕСЂР°СЏ СѓР¶Рµ Р±С‹Р»Р° РІС‹РґР°РЅР°.")

        Inventory.objects.filter(book=self).update(status='deleted')
        self.is_deleted = True
        self.save()

class Inventory(models.Model):
    book = models.ForeignKey(Book, on_delete=models.CASCADE)
    inventory_number = models.CharField(max_length=50, unique=True)
    status = models.CharField(max_length=20, choices=[('available', 'Available'), ('borrowed', 'Borrowed'), ('deleted', 'Deleted')], default='available')

    def save(self, *args, **kwargs):
        if not self.inventory_number:
            super().save(*args, **kwargs)  # СЃРЅР°С‡Р°Р»Р° СЃРѕС…СЂР°РЅРёС‚СЊ, С‡С‚РѕР±С‹ РїРѕСЏРІРёР»СЃСЏ id
            self.inventory_number = f"INV-{self.id:05d}"
            return super().save(update_fields=["inventory_number"])
        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        if BookIssue.objects.filter(invantory=self).exists():
            raise ValidationError("РќРµР»СЊР·СЏ СѓРґР°Р»РёС‚СЊ РєРЅРёРіСѓ, РєРѕС‚РѕСЂР°СЏ СѓР¶Рµ Р±С‹Р»Р° РІС‹РґР°РЅР°.")

        self.status = "deleted"
        self.save()

    def __str__(self):
        return f"{self.inventory_number} вЂ” {self.book.title}"

class BookIssue(SoftDeleteModel):
    reader = models.ForeignKey(User, on_delete=models.CASCADE, limit_choices_to={'role': 'reader'})
    inventory = models.ForeignKey(Inventory, on_delete=models.CASCADE)
    issue_date = models.DateField(auto_now_add=True)
    due_date = models.DateField()
    issued_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='issued_books',
                                  limit_choices_to={'role': 'librarian'})

    def __str__(self):
        return f"{self.reader} - {self.inventory}"



class BookReturn(SoftDeleteModel):
    issue = models.OneToOneField(BookIssue, on_delete=models.CASCADE)
    return_date = models.DateField(auto_now_add=True)
    condition = models.TextField(blank=True)
    fine = models.DecimalField(max_digits=6, decimal_places=2, default=0)
    received_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='returned_books',
                                    limit_choices_to={'role': 'librarian'})

    def save(self, *args, **kwargs):
        if self.issue:
            due_date = self.issue.due_date
            now = timezone.now().date()
            if now > due_date:
                days_late = (now - due_date).days
                self.fine = days_late * 5  # 5 СЃРѕРјРѕРІ РІ РґРµРЅСЊ
        super().save(*args, **kwargs)

    def __str__(self):
        return f"Return for {self.issue}"



# ---- END OF D:\djangoProjects\drfsite\librarian\models.py ----

from rest_framework.permissions import BasePermission, SAFE_METHODS

class IsLibrarian(BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.role == 'librarian'

class IsReader(BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.role == 'reader'

class IsOwnerOrLibrarian(BasePermission):

    def has_object_permission(self, request, view, obj):
        return (
            request.user.role == 'librarian' or
            obj.reader == request.user  # РґР»СЏ РјРѕРґРµР»РµР№, РіРґРµ РµСЃС‚СЊ РїРѕР»Рµ reader
        )

# ---- END OF D:\djangoProjects\drfsite\librarian\permissions.py ----


from datetime import timedelta
from django.utils import timezone
from rest_framework import serializers
from django.contrib.auth import get_user_model
from rest_framework.exceptions import ValidationError
from .models import Author, Direction, Publisher, Book, Inventory, BookIssue, BookReturn
from datetime import date
import re



User = get_user_model()

# --- User ---
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'password', 'first_name', 'last_name', 'middle_name', 'email',
                  'role', 'birth_date', 'passport', 'phone', 'address']
        extra_kwargs = {
            'password': {'write_only': True, 'required': False},
            'passport': {'required': False},  # Р”РµР»Р°РµС‚ РїР°СЃРїРѕСЂС‚ РЅРµРѕР±СЏР·Р°С‚РµР»СЊРЅС‹Рј РїСЂРё РѕР±РЅРѕРІР»РµРЅРёРё
            'phone': {'required': False},  # Р”РµР»Р°РµС‚ С‚РµР»РµС„РѕРЅ РЅРµРѕР±СЏР·Р°С‚РµР»СЊРЅС‹Рј РїСЂРё РѕР±РЅРѕРІР»РµРЅРёРё
            'address': {'required': False},
        }

    def validate_passport(self, value):
        if not re.match(r'^[A-ZРђ-РЇ]{2}\d{6}$', value):
            raise serializers.ValidationError('РџР°СЃРїРѕСЂС‚ РґРѕР»Р¶РµРЅ СЃРѕРґРµСЂР¶Р°С‚СЊ 2 Р±СѓРєРІС‹ Рё 6 С†РёС„СЂ (РЅР°РїСЂРёРјРµСЂ: AN123456)')
        return value

    def validate_phone(self, value):
        if not re.match(r'^\+996\d{9}$', value):
            raise serializers.ValidationError('РўРµР»РµС„РѕРЅ РґРѕР»Р¶РµРЅ Р±С‹С‚СЊ РІ С„РѕСЂРјР°С‚Рµ +996XXXXXXXXX')
        return value

    def validate_address(self, value):
        if len(value.strip()) < 5:
            raise serializers.ValidationError('РђРґСЂРµСЃ СЃР»РёС€РєРѕРј РєРѕСЂРѕС‚РєРёР№')
        return value

    def validate_birth_date(self, value):
        if value and value > timezone.now().date():
            raise serializers.ValidationError('Р”Р°С‚Р° СЂРѕР¶РґРµРЅРёСЏ РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РІ Р±СѓРґСѓС‰РµРј')
        return value

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        return user

    def update(self, instance, validated_data):
        for attr, value in validated_data.items():
            if attr == 'password':
                instance.set_password(value)
            else:
                setattr(instance, attr, value)

        instance.save()
        return instance


class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ['username', 'password', 'first_name', 'last_name', 'middle_name']

    def create(self, validated_data):
        validated_data['role'] = 'reader'
        return User.objects.create_user(**validated_data)


# --- Author ---
class AuthorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Author
        fields = '__all__'

# --- Direction ---
class DirectionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Direction
        fields = '__all__'

# --- Publisher ---
class PublisherSerializer(serializers.ModelSerializer):
    class Meta:
        model = Publisher
        fields = '__all__'

# --- Book ---
class BookSerializer(serializers.ModelSerializer):
    authors = AuthorSerializer(many=True, read_only=True)
    direction = DirectionSerializer(read_only=True)
    publisher = PublisherSerializer(read_only=True)

    author_ids = serializers.PrimaryKeyRelatedField(
        queryset=Author.objects.filter(is_deleted=False), many=True, write_only=True
    )
    direction_id = serializers.PrimaryKeyRelatedField(
        queryset=Direction.objects.filter(is_deleted=False), write_only=True
    )
    publisher_id = serializers.PrimaryKeyRelatedField(
        queryset=Publisher.objects.filter(is_deleted=False), write_only=True
    )
    class Meta:
        model = Book
        fields = '__all__'

    def create(self, validated_data):
        author_ids = validated_data.pop('author_ids')
        direction = validated_data.pop('direction_id')
        publisher = validated_data.pop('publisher_id')

        book = Book(**validated_data, direction=direction, publisher=publisher)
        book.save()
        book.authors.set(author_ids)

        return book

    def update(self, instance, validated_data):
        author_ids = validated_data.pop('author_ids', None)
        direction = validated_data.pop('direction_id', None)
        publisher = validated_data.pop('publisher_id', None)

        if direction is not None:
            instance.direction = direction
        if publisher is not None:
            instance.publisher = publisher

        for attr, value in validated_data.items():
            setattr(instance, attr, value)

        instance.save()

        if author_ids is not None:
            instance.authors.set(author_ids)

        return instance



# --- Inventory ---
class InventorySerializer(serializers.ModelSerializer):
    book = BookSerializer(read_only=True)

    class Meta:
        model = Inventory
        fields = '__all__'



# --- BookIssue ---
class BookIssueSerializer(serializers.ModelSerializer):
    reader = UserSerializer(read_only=True)
    inventory = InventorySerializer(read_only=True)

    book_id = serializers.PrimaryKeyRelatedField(
        queryset=Book.objects.filter(is_deleted=False),
        write_only=True
    )
    reader_id = serializers.PrimaryKeyRelatedField(
        queryset=User.objects.filter(role='reader', is_active=True),
        write_only=True
    )
    due_date = serializers.DateField(required=True)

    class Meta:
        model = BookIssue
        fields = ['id', 'reader', 'reader_id', 'book_id', 'inventory', 'issued_by', 'issue_date', 'due_date']
        read_only_fields = ['issue_date', 'issued_by', 'reader', 'inventory']

    def validate(self, attrs):
        reader = attrs['reader_id']
        book = attrs['book_id']

        # РџСЂРѕРІРµСЂРєР°: РґРѕСЃС‚СѓРїРЅС‹Рµ СЌРєР·РµРјРїР»СЏСЂС‹
        if not Inventory.objects.filter(book=book, status='available').exists():
            raise serializers.ValidationError("РќРµС‚ РґРѕСЃС‚СѓРїРЅС‹С… СЌРєР·РµРјРїР»СЏСЂРѕРІ СЌС‚РѕР№ РєРЅРёРіРё.")

        # РџСЂРѕРІРµСЂРєР°: Р±РѕР»СЊС€Рµ 3 РєРЅРёРі Сѓ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
        active_issues = BookIssue.objects.filter(
            reader=reader,
            bookreturn__isnull=True
        )
        if active_issues.count() >= 3:
            raise serializers.ValidationError("РќРµР»СЊР·СЏ РёРјРµС‚СЊ Р±РѕР»СЊС€Рµ 3 РєРЅРёРі РѕРґРЅРѕРІСЂРµРјРµРЅРЅРѕ.")

        # РџСЂРѕРІРµСЂРєР°: РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ СѓР¶Рµ РёРјРµРµС‚ СЌС‚Сѓ РєРЅРёРіСѓ
        if active_issues.filter(inventory__book=book).exists():
            raise serializers.ValidationError("РЈ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ СѓР¶Рµ РµСЃС‚СЊ СЌС‚Р° РєРЅРёРіР° РЅР° СЂСѓРєР°С….")

        return attrs

    def create(self, validated_data):
        reader = validated_data.pop('reader_id')
        book = validated_data.pop('book_id')
        due_date = validated_data.pop('due_date')

        inventory = Inventory.objects.filter(book=book, status='available').first()
        validated_data['reader'] = reader
        validated_data['inventory'] = inventory
        validated_data['due_date'] = due_date
        validated_data['issued_by'] = self.context['request'].user

        inventory.status = 'borrowed'
        inventory.save()

        return super().create(validated_data)

# --- BookReturn ---
class BookReturnSerializer(serializers.ModelSerializer):
    issue = BookIssueSerializer(read_only=True)
    issue_id = serializers.PrimaryKeyRelatedField(
        queryset=BookIssue.objects.all(),
        write_only=True
    )

    class Meta:
        model = BookReturn
        fields = ['id', 'issue', 'issue_id', 'return_date', 'condition', 'fine', 'received_by']
        read_only_fields = ['return_date', 'received_by', 'issue', 'fine']

    def validate_issue_id(self, value):
        if BookReturn.objects.filter(issue=value).exists():
            raise serializers.ValidationError("Р­С‚Р° РєРЅРёРіР° СѓР¶Рµ Р±С‹Р»Р° РІРѕР·РІСЂР°С‰РµРЅР°.")
        return value

    def create(self, validated_data):
        issue = validated_data.pop('issue_id')
        inventory = issue.inventory

        inventory.status = 'available'
        inventory.save()

        validated_data['issue'] = issue
        validated_data['received_by'] = self.context['request'].user

        return super().create(validated_data)

# ---- END OF D:\djangoProjects\drfsite\librarian\serializers.py ----

from django.test import TestCase

# Create your tests here.

# ---- END OF D:\djangoProjects\drfsite\librarian\tests.py ----


# ---- END OF D:\djangoProjects\drfsite\librarian\tests\__init__.py ----

from django.test import TestCase
from django.utils import timezone
from datetime import timedelta

from librarian.models import User
from librarian.models import Book, Inventory
from librarian.serializers import BookIssueSerializer


class BookIssueSerializerTest(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.reader = User.objects.create_user(username='reader1', role='reader', password='123')
        cls.librarian = User.objects.create_user(username='lib1', role='librarian', password='123')
        cls.book = Book.objects.create(title='Test Book', count=1)
        cls.inventory = Inventory.objects.create(book=cls.book, status='available')

    def test_create_book_issue_success(self):
        data = {
            'reader_id': self.reader.id,
            'book_id': self.book.id
        }
        context = {'request': type('Request', (), {'user': self.librarian})()}

        serializer = BookIssueSerializer(data=data, context=context)
        self.assertTrue(serializer.is_valid(), serializer.errors)

        issue = serializer.save()

        self.assertEqual(issue.reader, self.reader)
        self.assertEqual(issue.inventory.book, self.book)
        self.assertEqual(issue.issued_by, self.librarian)
        self.assertEqual(issue.inventory.status, 'borrowed')
        self.assertEqual(issue.due_date, timezone.now().date() + timedelta(days=30))

# ---- END OF D:\djangoProjects\drfsite\librarian\tests\test_book_issue.py ----

from django.test import TestCase

# Create your tests here.

from django.test import TestCase
from django.contrib.auth import get_user_model

class UserTests(TestCase):
    def test_create_user(self):
        user = get_user_model().objects.create_user(
            username='testuser',
            password='testpass123',
        )
        self.assertEqual(user.username, 'testuser')

# ---- END OF D:\djangoProjects\drfsite\librarian\tests\tests.py ----

from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import viewsets, permissions, generics, status, filters
from rest_framework.permissions import IsAuthenticated, SAFE_METHODS
from .permissions import IsLibrarian, IsReader, IsOwnerOrLibrarian
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.response import Response
from django.core.exceptions import ValidationError
from django.utils import timezone
from django.db import models




from .models import User, Author, Direction, Publisher, Book, Inventory, BookIssue, BookReturn
from .serializers import (
    UserSerializer, RegisterSerializer,
    AuthorSerializer, DirectionSerializer,
    PublisherSerializer, BookSerializer,
    InventorySerializer, BookIssueSerializer, BookReturnSerializer
)


class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = RegisterSerializer
    permission_classes = [permissions.AllowAny]

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()

        refresh = RefreshToken.for_user(user)
        return Response({
            "refresh": str(refresh),
            "access": str(refresh.access_token),
            "user": UserSerializer(user).data
        }, status=status.HTTP_201_CREATED)


class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    filter_backends = [filters.SearchFilter, DjangoFilterBackend, filters.OrderingFilter]
    search_fields = ['first_name', 'last_name', 'passport', 'phone', 'username']
    filterset_fields = ['role']
    ordering_fields = ['last_name', 'username']

    def get_permissions(self):
        return [IsLibrarian()]


class AuthorViewSet(viewsets.ModelViewSet):
    queryset = Author.objects.all()
    serializer_class = AuthorSerializer
    filter_backends = [filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['first_name', 'last_name']
    ordering_fields = ['last_name', 'first_name']

    def get_permissions(self):
        if self.request.method in SAFE_METHODS:
            return [IsAuthenticated()]
        return [IsLibrarian()]


class DirectionViewSet(viewsets.ModelViewSet):
    queryset = Direction.objects.all()
    serializer_class = DirectionSerializer
    filter_backends = [filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['name']
    ordering_fields = ['name']

    def get_permissions(self):
        if self.request.method in SAFE_METHODS:
            return [IsAuthenticated()]
        return [IsLibrarian()]


class PublisherViewSet(viewsets.ModelViewSet):
    queryset = Publisher.objects.all()
    serializer_class = PublisherSerializer
    filter_backends = [filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['name']
    ordering_fields = ['name']

    def get_permissions(self):
        if self.request.method in SAFE_METHODS:
            return [IsAuthenticated()]
        return [IsLibrarian()]



class BookViewSet(viewsets.ModelViewSet):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['publisher', 'direction']
    search_fields = ['title', 'authors__last_name']
    ordering_fields = ['title', 'quantity']

    def get_permissions(self):
        if self.request.method in SAFE_METHODS:
            return [IsAuthenticated()]
        return [IsLibrarian()]

    def destroy(self, request, *args, **kwargs):
        book = self.get_object()
        if Inventory.objects.filter(book=book, status='issued').exists():
            raise ValidationError("РќРµР»СЊР·СЏ СѓРґР°Р»РёС‚СЊ РєРЅРёРіСѓ, РєРѕС‚РѕСЂР°СЏ РІС‹РґР°РЅР°.")
        book.is_active = False
        book.save()
        return Response(status=status.HTTP_204_NO_CONTENT)


class InventoryViewSet(viewsets.ModelViewSet):
    queryset = Inventory.objects.all()
    serializer_class = InventorySerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['book', 'status']
    search_fields = ['inventory_number', 'book__title']
    ordering_fields = ['inventory_number']

    def get_permissions(self):
        if self.request.method in SAFE_METHODS:
            return [IsAuthenticated()]
        return [IsLibrarian()]


class BookIssueViewSet(viewsets.ModelViewSet):
    queryset = BookIssue.objects.select_related('reader', 'inventory', 'issued_by')
    serializer_class = BookIssueSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['reader', 'issued_by']
    search_fields = ['reader__last_name', 'inventory__inventory_number']
    ordering_fields = ['issue_date', 'due_date']

    def get_permissions(self):
        if self.action in ['create', 'update', 'partial_update', 'destroy']:
            return [IsLibrarian()]
        elif self.action == 'retrieve':
            return [IsOwnerOrLibrarian()]
        return [IsAuthenticated()]

    def perform_create(self, serializer):
        serializer.save(issued_by=self.request.user)


class BookReturnViewSet(viewsets.ModelViewSet):
    queryset = BookReturn.objects.select_related('issue', 'issue__inventory', 'received_by')
    serializer_class = BookReturnSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['received_by']
    search_fields = ['issue__reader__last_name', 'issue__inventory__inventory_number']
    ordering_fields = ['return_date']

    def get_permissions(self):
        if self.action in ['create', 'update', 'partial_update', 'destroy']:
            return [IsLibrarian()]
        elif self.action == 'retrieve':
            return [IsOwnerOrLibrarian()]
        return [IsAuthenticated()]

    def perform_create(self, serializer):
        serializer.save(received_by=self.request.user)


class CurrentUserView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        return Response(UserSerializer(request.user).data)


class IssuedBooksReportView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        issues = BookIssue.objects.select_related('reader', 'inventory__book', 'issued_by')

        report_data = []
        for issue in issues:
            returned = BookReturn.objects.filter(issue=issue).exists()
            status = "Р’РѕР·РІСЂР°С‰РµРЅР°" if returned else "РќР° СЂСѓРєР°С…"
            report_data.append({
                "issue_id": issue.id,
                "issue_date": issue.issue_date,
                "title": issue.inventory.book.title,
                "reader": issue.reader.get_full_name(),
                "issued_by": issue.issued_by.get_full_name() if issue.issued_by else "-",
                "due_date": issue.due_date,
                "status": status,
            })

        return Response(report_data)

class OverdueBooksReportView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        today = timezone.now().date()
        # РќР°С…РѕРґРёРј РІСЃРµ РєРЅРёРіРё, РєРѕС‚РѕСЂС‹Рµ РЅРµ Р±С‹Р»Рё РІРѕР·РІСЂР°С‰РµРЅС‹ Рё РїСЂРѕСЃСЂРѕС‡РµРЅС‹
        overdue_issues = BookIssue.objects.filter(
            due_date__lt=today,
            inventory__status='issued'
        ).select_related('reader', 'inventory')

        data = []
        for issue in overdue_issues:
            data.append({
                'reader': str(issue.reader),
                'inventory_number': issue.inventory.inventory_number,
                'book_title': issue.inventory.book.title,
                'issue_date': issue.issue_date,
                'due_date': issue.due_date,
                'days_overdue': (today - issue.due_date).days,
            })

        return Response(data)


class BookAvailabilityReportView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        books = Book.objects.filter(is_deleted=False)

        report = []
        for book in books:
            total_copies = Inventory.objects.filter(book=book).count()
            available_copies = Inventory.objects.filter(book=book, status='available').count()
            issued_copies = Inventory.objects.filter(book=book, status='borrowed').count()
            deleted_copies = Inventory.objects.filter(book=book, status='deleted').count()

            report.append({
                'book_title': book.title,
                'total_copies': total_copies,
                'available_copies': available_copies,
                'issued_copies': issued_copies,
                'deleted_copies': deleted_copies,
            })

        return Response(report)

class ReaderActivityReportView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        readers = User.objects.filter(role='reader', is_active = True)

        report = []
        for reader in readers:
            books_borrowed = BookIssue.objects.filter(reader=reader).count()
            total_fines = BookReturn.objects.filter(issue__reader=reader).aggregate(
                total_fine=models.Sum('fine')
            )['total_fine'] or 0

            report.append({
                'reader_name': f"{reader.last_name} {reader.first_name}",
                'books_borrowed': books_borrowed,
                'total_fines': float(total_fines),
            })

        return Response(report)

# class ReaderAPIList(generics.ListCreateAPIView):
#     queryset = Reader.objects.all()
#     serializer_class = ReaderSerializer
#
# class ReaderAPIDetail(generics.RetrieveUpdateDestroyAPIView):
#     queryset = Reader.objects.all()
#     serializer_class = ReaderSerializer

# class ReaderAPIView(APIView):
#     def get(self, request):
#         r = Reader.objects.all()
#         return Response({'posts': ReaderSerializer(r, many=True).data})
#
#
#     def post(self, request):
#         serializer = ReaderSerializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         serializer.save()
#
#         return Response({'post': serializer.data})
#
#
#     def put(self, request, *args, **kwargs):
#         pk = kwargs.get("pk", None)
#         if not pk:
#             return Response({"error": "Method PUT not allowed"})
#
#         try:
#             instance = Reader.objects.get(pk = pk)
#         except:
#             return Response({"error": "Object does not exist"})
#
#
#         serializer = ReaderSerializer(data=request.data, instance=instance, partial=True)
#         serializer.is_valid(raise_exception=True)
#         serializer.save()
#         return Response({"post": serializer.data})
#
#
#     def delete(self, request, *args, **kwargs):
#         pk = kwargs.get("pk", None)
#         if not pk:
#             return Response({"error": "Method DELETE not allowed"}, status=400)
#
#         try:
#             instance = Reader.objects.get(pk=pk)
#         except Reader.DoesNotExist:
#             return Response({"error": "Object does not exist"}, status=404)
#
#         instance.delete()
#         return Response({"message": "Reader deleted successfully"}, status=204)

# ---- END OF D:\djangoProjects\drfsite\librarian\views.py ----

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'drfsite.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

# ---- END OF D:\djangoProjects\drfsite\manage.py ----

